<script>
    let mainSelector = document.querySelector("{{ thank_you_main_selector }}")
    if(mainSelector) {
        mainSelector.style.display = "none";
    }

    function hideOrderAndCustomerDetails() {
        let orderOverview = document.querySelector("{{ thank_you_order_overview_selector }}")
        if (orderOverview) {
            orderOverview.style.display = "none";
        }

        let customerDetails = document.querySelector("{{ thank_you_customer_details_selector }}")
        if (customerDetails) {
            customerDetails.style.display = "none";
        }

        let orderDetails = document.querySelector("{{ thank_you_order_details_selector }}")
        if (orderDetails) {
            orderDetails.style.display = "none";
        }
    }

    function mainFallback() {
        let entryTitle = document.querySelector("{{ thank_you_title_selector }}");
        if (entryTitle) {
            entryTitle.textContent = "Order Received but not processed";
        }

        let noticeElement = document.querySelector("{{ thank_you_notice_selector }}");
        if (noticeElement) {
            noticeElement.innerHTML = "<p>Your order was sent to us, " + 
                "but we were unable to confirm your order due to unexpected internal error.</p>" +
                "<p>Our customer service is being alerted and will review your case promptly.</p>" +
                "<p>Please save your order number <b>{{ order_id }}</b> for future review.</p>";
        }

        hideOrderAndCustomerDetails();

        let mainSelector = document.querySelector("{{ thank_you_main_selector }}")
        if(mainSelector) {
            mainSelector.style.display = "block";
        }
    }

    function showSpinner() {
        // Create spinner overlay
        let spinnerOverlay = document.createElement('div');
        spinnerOverlay.id = 'wgf-spinner-overlay';
        spinnerOverlay.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999;
    `;

        // Create spinner element
        let spinner = document.createElement('div');
        spinner.style.cssText = `
        width: 50px;
        height: 50px;
        border: 5px solid #f3f3f3;
        border-top: 5px solid #3498db;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    `;

        // Add CSS animation
        if (!document.getElementById('wgf-spinner-styles')) {
            let style = document.createElement('style');
            style.id = 'wgf-spinner-styles';
            style.textContent = `
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
        `;
            document.head.appendChild(style);
        }

        spinnerOverlay.appendChild(spinner);
        document.body.appendChild(spinnerOverlay);
    }

    function removeSpinner() {
        let spinnerOverlay = document.getElementById('wgf-spinner-overlay');
        if (spinnerOverlay) {
            spinnerOverlay.remove();
        }
    }

    function showClosureMessage() {
        showSpinner();
        setTimeout(() => {
            formClosureMessage();
        }, 5000); // 10000 milliseconds = 10 seconds
    }

    function formClosureMessage() {
        let requestData = new FormData();
        requestData.append("order_id", {{ order_id }});
        requestData.append("_wpnonce", "{{ nonce }}");
        requestData.append("action", "{{ ajax_action }}");

        fetch("{{ ajax_url }}", {
            method: "POST",
            body: requestData,
        })
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    throw new Error(`HTTP ${response.status}`);
                }
            })
            .then(resp => {
                let orderStatus = (
                    !resp || 
                    !resp.hasOwnProperty('orderStatus') || 
                    resp.orderStatus === undefined 
                    || resp.orderStatus === null
                ) ? "" : resp.orderStatus;

                if (orderStatus === "{{ oder_status_pending }}") {
                    let entryTitle = document.querySelector("{{ thank_you_title_selector }}");
                    if (entryTitle) {
                        entryTitle.textContent = "Order Unsuccessful";
                    }
                    let noticeElement = document.querySelector("{{ thank_you_notice_selector }}");
                    if (noticeElement) {
                        noticeElement.innerHTML = "<p>We regret to inform your payment was unsuccessful.</p>" +
                            "<p>Either you closed the funnel before completing it or your order was sent to us, " +
                            "but we are not able to offer you a payment solution at the moment.</p>" +
                            "<p>You can continue to shop and use another payment method.</p>";
                    }
                } else if (orderStatus === "{{ order_status_on_hold }}") {
                    let entryTitle = document.querySelector("{{ thank_you_title_selector }}");
                    if (entryTitle) {
                        entryTitle.textContent = "Congratulation!";
                    }
                    let noticeElement = document.querySelector("{{ thank_you_notice_selector }}");
                    if (noticeElement) {
                        noticeElement.innerHTML = 
                            "<p>Your order was sent to us but is currently awaiting payment.</p>" +
                            "<p>Once we receive the payment for your order, it will be completed.</p>" +
                            "<p>If you've already provided payment details, " +
                            "then we will process your order manually and email you when it's completed.</p>";
                    }
                } else if (orderStatus === "{{ order_status_processing }}") {
                    let entryTitle = document.querySelector("{{ thank_you_title_selector }}");
                    if (entryTitle) {
                        entryTitle.textContent = "Congratulation!";
                    }
                    let noticeElement = document.querySelector("{{ thank_you_notice_selector }}");
                    if (noticeElement) {
                        noticeElement.innerHTML = 
                            "<p>Your payment was successfully received, and now your order is being fulfilled.</p>";
                    }
                } else if (orderStatus === "{{ order_status_failed }}") {
                    let entryTitle = document.querySelector("{{ thank_you_title_selector }}");
                    if (entryTitle) {
                        entryTitle.textContent = "Order Unsuccessful";
                    }
                    let noticeElement = document.querySelector("{{ thank_you_notice_selector }}");
                    if (noticeElement) {
                        noticeElement.innerHTML = "<p>We regret to inform your payment was unsuccessful.</p>" +
                            "<p>Your order was sent to us, " +
                            "but we are not able to offer you a payment solution at the moment.</p>" +
                            "<p>You can continue to shop and use another payment method.</p>";
                    }
                } else {
                    let entryTitle = document.querySelector("{{ thank_you_title_selector }}");
                    if (entryTitle) {
                        entryTitle.textContent = "Order " + orderStatus;
                        hideOrderAndCustomerDetails();
                    }
                }
                let mainSelector = document.querySelector("{{ thank_you_main_selector }}")
                if(mainSelector) {
                    mainSelector.style.display = "block";
                }

                removeSpinner();
            })
            .catch(err => {
                if (err.message.includes('HTTP 400')) {
                    let entryTitle = document.querySelector("{{ thank_you_title_selector }}");
                    if (entryTitle) {
                        entryTitle.textContent = "Error Processing Order Confirmation Request";
                    }
                } else {
                    let entryTitle = document.querySelector("{{ thank_you_title_selector }}");
                    if (entryTitle) {
                        entryTitle.textContent = "Error Processing Order Confirmation";
                    }
                }

                let noticeElement = document.querySelector("{{ thank_you_notice_selector }}");
                if (noticeElement) {
                    noticeElement.innerHTML = "<p>Your order was sent to us, " + 
                        "but we were unable to confirm your order due to unexpected internal error.</p>" +
                        "<p>Our customer service is being alerted and will review your case promptly.</p>" +
                        "<p>Please save your order number <b>{{ order_id }}</b> for future review.</p>";
                }

                let mainSelector = document.querySelector("{{ thank_you_main_selector }}")
                if(mainSelector) {
                    mainSelector.style.display = "block";
                }

                removeSpinner();
            });
    }

    function initializeFinancing() {
        try {
            if (typeof GetFinancing !== 'undefined' && GetFinancing) {
                new GetFinancing(
                    "{{ wgf_href }}",
                    function () {
                        showClosureMessage();
                    }.bind(self),
                    function () {
                        showClosureMessage();
                    }.bind(self)
                )
            } else {
                mainFallback();
            }
        } catch (error) {
            mainFallback();
        }

    }

    // Check if page is already loaded and ensure all resources are loaded
    if (document.readyState === 'complete') {
        initializeFinancing();
    } else {
        window.addEventListener('load', initializeFinancing);
    }
</script>